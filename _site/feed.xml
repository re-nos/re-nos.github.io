<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-08-23T20:23:19+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Blog Title</title><subtitle>Made with &lt;b style=&quot;color: #f45;&quot;&gt;&amp;lt;3&lt;/b&gt;</subtitle><author><name>Blog Author</name></author><entry><title type="html">tcl procedure args</title><link href="http://localhost:4000/tcl-procedure-args/" rel="alternate" type="text/html" title="tcl procedure args" /><published>2023-08-23T00:00:00+09:00</published><updated>2023-08-23T00:00:00+09:00</updated><id>http://localhost:4000/tcl-procedure-args</id><content type="html" xml:base="http://localhost:4000/tcl-procedure-args/"><![CDATA[<h2 id="tcl-procedure-args">tcl procedure args</h2>

<blockquote>
  <p>procedure argument 를 list 로 전달하고 싶을 때 {*} 또는 eval 을 이용하여 전달 할 수 있다.</p>
</blockquote>

<h3 id="1----tcl-85-버전부터-사용-가능">1. {*} - <em>Tcl 8.5 버전부터 사용 가능</em></h3>
<p>{*} 은 tcl 에서 expansion 연산자로 리스트 원소를 하나씩 전개하여 전달하는 역할을 한다. {*} 을 이용하여 procedure argument 로 list 를 전달하는 방법은 다음과 같다.</p>
<div class="language-tcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code>proc myProc <span class="p">{</span>arg1 arg2 arg3 arg4<span class="p">}</span> <span class="p">{</span>
    puts <span class="s2">"</span><span class="nv">$arg1</span><span class="s2"> </span><span class="nv">$arg2</span><span class="s2"> </span><span class="nv">$arg3</span><span class="s2"> </span><span class="nv">$arg4</span><span class="s2">"</span>
<span class="p">}</span>

set myList <span class="p">[</span>list a b c<span class="p">]</span>
myProc <span class="k">{*}</span><span class="nv">$my</span>List d
<span class="c1"># a b c d</span>
</code></pre></div></div>

<h3 id="2-eval">2. eval</h3>
<p>eval 은 문자열로 된 tcl 코드를 실행하는 명령으로 eval 과 concat 을 사용하여 procedure argument 로 list 를 전달 할 수 있다.</p>
<div class="language-tcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code>proc myProc <span class="p">{</span>arg1 arg2 arg3 arg4<span class="p">}</span> <span class="p">{</span>
    puts <span class="s2">"</span><span class="nv">$arg1</span><span class="s2"> </span><span class="nv">$arg2</span><span class="s2"> </span><span class="nv">$arg3</span><span class="s2"> </span><span class="nv">$arg4</span><span class="s2">"</span>
<span class="p">}</span>

set myList <span class="p">[</span>list a b c<span class="p">]</span>
eval <span class="p">[</span>concat myProc $myList d<span class="p">]</span>
<span class="c1"># a b c d</span>
</code></pre></div></div>

<hr />

<p>procedure 내부에서 인자로 받은 args 를 그대로 다른 procedure args 로 전달할 때도 위 방법을 이용할 수 있다.</p>
<div class="language-tcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code>proc myProc1 <span class="p">{</span>args<span class="p">}</span> <span class="p">{</span>
    myProc2 <span class="k">{*}</span><span class="nv">$args</span>
    # eval <span class="p">[</span>concat myProc2 $args<span class="p">]</span>
<span class="p">}</span>

proc myProc2 <span class="p">{</span>args<span class="p">}</span> <span class="p">{</span>
    puts $args
<span class="p">}</span>

myProc2 a b c
</code></pre></div></div>]]></content><author><name>Blog Author</name></author><category term="tcl" /><summary type="html"><![CDATA[tcl procedure args procedure argument 를 list 로 전달하고 싶을 때 {*} 또는 eval 을 이용하여 전달 할 수 있다. 1. {*} - Tcl 8.5 버전부터 사용 가능 {*} 은 tcl 에서 expansion 연산자로 리스트 원소를 하나씩 전개하여 전달하는 역할을 한다. {*} 을 이용하여 procedure argument 로 list 를 전달하는 방법은 다음과 같다. proc myProc {arg1 arg2 arg3 arg4} { puts "$arg1 $arg2 $arg3 $arg4" } set myList [list a b c] myProc {*}$myList d # a b c d 2. eval eval 은 문자열로 된 tcl 코드를 실행하는 명령으로 eval 과 concat 을 사용하여 procedure argument 로 list 를 전달 할 수 있다. proc myProc {arg1 arg2 arg3 arg4} { puts "$arg1 $arg2 $arg3 $arg4" } set myList [list a b c] eval [concat myProc $myList d] # a b c d procedure 내부에서 인자로 받은 args 를 그대로 다른 procedure args 로 전달할 때도 위 방법을 이용할 수 있다. proc myProc1 {args} { myProc2 {*}$args # eval [concat myProc2 $args] } proc myProc2 {args} { puts $args } myProc2 a b c]]></summary></entry><entry><title type="html">tcl catch</title><link href="http://localhost:4000/tcl-catch/" rel="alternate" type="text/html" title="tcl catch" /><published>2023-08-21T00:00:00+09:00</published><updated>2023-08-21T00:00:00+09:00</updated><id>http://localhost:4000/tcl-catch</id><content type="html" xml:base="http://localhost:4000/tcl-catch/"><![CDATA[<h2 id="tcl-catch">tcl catch</h2>

<blockquote>
  <p>catch 는 예외 처리를 위해 사용되는 command 로 명령어 실행 중 발생하는 error 를 catch 하고, error message 를 가져올 수 있다.</p>
</blockquote>

<p>catch command 는 다음과 같다.</p>

<div class="language-tcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code>catch SCRIPT ?RESULTVAR? ?OPTSVAR?
</code></pre></div></div>

<p>SCRIPT 에는 code block 이 들어가고, catch 를 수행하면 SCRIPT 에 대한 return code 가 반환된다.</p>
<div class="language-tcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code>catch <span class="p">{</span>set a 100<span class="p">}</span>
<span class="c1"># 0</span>
catch <span class="p">{</span>set b $nosuchvar<span class="p">}</span>
<span class="c1"># 1</span>
</code></pre></div></div>

<p>RESULTVAR 에 변수를 지정하면 해당 변수가 SCRIPT 의 결과를 지니게 된다.</p>
<div class="language-tcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code>catch <span class="p">{</span>set a 100<span class="p">}</span> result
puts $result
<span class="c1"># 100</span>
catch <span class="p">{</span>set b $nosuchvar<span class="p">}</span> result
puts $result
# can't read <span class="s2">"nosuchvar"</span>: no such variable
</code></pre></div></div>

<p>OPTSVAR 에 변수를 지정하면 해당 변수가 return option dictionary 를 지니게 된다.</p>

<hr />

<p>SCRIPT 는 code block 형태로 여러 command 를 수행하는 방법은 다음과 같다.</p>
<div class="language-tcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code>catch <span class="p">{</span>set a 100 <span class="p">;</span> set b 200<span class="p">}</span>
puts $a
<span class="c1"># 100</span>
puts $b
<span class="c1"># 200</span>

catch <span class="p">{</span>
    set a 100
    set b 200
<span class="p">}</span>

set cmd <span class="p">{</span>
    set a 100
    set b 200
<span class="p">}</span>
catch <span class="p">{</span>eval $cmd<span class="p">}</span>

set data <span class="p">[</span>list a b c<span class="p">]</span>
catch <span class="p">{</span>
    set d <span class="p">[</span>lindex $data 0<span class="p">]</span>
    puts $d
<span class="p">}</span>
</code></pre></div></div>
<p>catch command 를 이용하여 error 를 처리하는 방법은 다음과 같다.</p>
<div class="language-tcl highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if <span class="p">{[</span>catch <span class="p">{</span>set a $nosuchvar<span class="p">}</span> errormsg<span class="p">]}</span> <span class="p">{</span>
    puts $errormsg
<span class="p">}</span> else <span class="p">{</span>
    puts $a
<span class="p">}</span>
# can't read <span class="s2">"nosuchvar"</span>: no such variable
</code></pre></div></div>]]></content><author><name>Blog Author</name></author><category term="tcl" /><summary type="html"><![CDATA[tcl catch catch 는 예외 처리를 위해 사용되는 command 로 명령어 실행 중 발생하는 error 를 catch 하고, error message 를 가져올 수 있다. catch command 는 다음과 같다. catch SCRIPT ?RESULTVAR? ?OPTSVAR? SCRIPT 에는 code block 이 들어가고, catch 를 수행하면 SCRIPT 에 대한 return code 가 반환된다. catch {set a 100} # 0 catch {set b $nosuchvar} # 1 RESULTVAR 에 변수를 지정하면 해당 변수가 SCRIPT 의 결과를 지니게 된다. catch {set a 100} result puts $result # 100 catch {set b $nosuchvar} result puts $result # can't read "nosuchvar": no such variable OPTSVAR 에 변수를 지정하면 해당 변수가 return option dictionary 를 지니게 된다. SCRIPT 는 code block 형태로 여러 command 를 수행하는 방법은 다음과 같다. catch {set a 100 ; set b 200} puts $a # 100 puts $b # 200 catch { set a 100 set b 200 } set cmd { set a 100 set b 200 } catch {eval $cmd} set data [list a b c] catch { set d [lindex $data 0] puts $d } catch command 를 이용하여 error 를 처리하는 방법은 다음과 같다. if {[catch {set a $nosuchvar} errormsg]} { puts $errormsg } else { puts $a } # can't read "nosuchvar": no such variable]]></summary></entry><entry><title type="html">Welcome to Jekyll</title><link href="http://localhost:4000/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll" /><published>2017-03-01T00:00:00+09:00</published><updated>2017-03-01T00:00:00+09:00</updated><id>http://localhost:4000/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/welcome-to-jekyll/"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="http://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Blog Author</name></author><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">Markdown examples</title><link href="http://localhost:4000/markdown-examples/" rel="alternate" type="text/html" title="Markdown examples" /><published>2017-02-01T00:00:00+09:00</published><updated>2017-02-01T00:00:00+09:00</updated><id>http://localhost:4000/markdown-examples</id><content type="html" xml:base="http://localhost:4000/markdown-examples/"><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>

<p>Curabitur pretium tincidunt lacus. Nulla gravida orci a odio. Nullam varius, turpis et commodo pharetra, est eros bibendum elit, nec luctus magna felis sollicitudin mauris. Integer in mauris eu nibh euismod gravida. Duis ac tellus et risus vulputate vehicula. Donec lobortis risus a elit.</p>

<h2 id="heading-two-h2">Heading Two (h2)</h2>

<h3 id="heading-three-h3">Heading Three (h3)</h3>

<h4 id="heading-four-h4">Heading Four (h4)</h4>

<h5 id="heading-five-h5">Heading Five (h5)</h5>

<h6 id="heading-six-h6">Heading Six (h6)</h6>

<h2 id="blockquotes">Blockquotes</h2>

<h3 id="single-line">Single line</h3>

<blockquote>
  <p>My mom always said life was like a box of chocolates. You never know what you’re gonna get.</p>
</blockquote>

<h3 id="multiline">Multiline</h3>

<blockquote>
  <p>What do you get when you cross an insomniac, an unwilling agnostic and a dyslexic?</p>

  <p>You get someone who stays up all night torturing himself mentally over the question of whether or not there’s a dog.</p>

  <p>– <em>Hal Incandenza</em></p>
</blockquote>

<h2 id="horizontal-rule">Horizontal Rule</h2>

<hr />

<h2 id="table">Table</h2>

<table>
  <thead>
    <tr>
      <th>Title 1</th>
      <th>Title 2</th>
      <th>Title 3</th>
      <th>Title 4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>First entry</td>
      <td>Second entry</td>
      <td>Third entry</td>
      <td>Fourth entry</td>
    </tr>
    <tr>
      <td>Fifth entry</td>
      <td>Sixth entry</td>
      <td>Seventh entry</td>
      <td>Eight entry</td>
    </tr>
    <tr>
      <td>Ninth entry</td>
      <td>Tenth entry</td>
      <td>Eleventh entry</td>
      <td>Twelfth entry</td>
    </tr>
    <tr>
      <td>Thirteenth entry</td>
      <td>Fourteenth entry</td>
      <td>Fifteenth entry</td>
      <td>Sixteenth entry</td>
    </tr>
  </tbody>
</table>

<h2 id="code">Code</h2>

<p>Source code can be included by fencing the code with three backticks. Syntax highlighting works automatically when specifying the language after the backticks.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```javascript
function foo () {
    return "bar";
}
```
</code></pre></div></div>

<p>This would be rendered as:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">foo</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">"</span><span class="s2">bar</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="lists">Lists</h2>

<h3 id="unordered">Unordered</h3>

<ul>
  <li>First item</li>
  <li>Second item</li>
  <li>Third item
    <ul>
      <li>First nested item</li>
      <li>Second nested item</li>
    </ul>
  </li>
</ul>

<h3 id="ordered">Ordered</h3>

<ol>
  <li>First item</li>
  <li>Second item</li>
  <li>Third item
    <ol>
      <li>First nested item</li>
      <li>Second nested item</li>
    </ol>
  </li>
</ol>]]></content><author><name>Blog Author</name></author><summary type="html"><![CDATA[Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Curabitur pretium tincidunt lacus. Nulla gravida orci a odio. Nullam varius, turpis et commodo pharetra, est eros bibendum elit, nec luctus magna felis sollicitudin mauris. Integer in mauris eu nibh euismod gravida. Duis ac tellus et risus vulputate vehicula. Donec lobortis risus a elit.]]></summary></entry><entry><title type="html">Advanced examples</title><link href="http://localhost:4000/advanced-examples/" rel="alternate" type="text/html" title="Advanced examples" /><published>2017-01-01T00:00:00+09:00</published><updated>2017-01-01T00:00:00+09:00</updated><id>http://localhost:4000/advanced-examples</id><content type="html" xml:base="http://localhost:4000/advanced-examples/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/4943215/55412536-edbba180-5567-11e9-9c70-6d33bca3f8ed.jpg" alt="Swiss Alps" /></p>

<h2 id="mathjax">MathJax</h2>

<p>You can enable MathJax by setting <code class="language-plaintext highlighter-rouge">mathjax: true</code> on a page or globally in the <code class="language-plaintext highlighter-rouge">_config.yml</code>. Some examples:</p>

<p><a href="https://en.wikipedia.org/wiki/Euler%27s_formula">Euler’s formula</a> relates the  complex exponential function to the trigonometric functions.</p>

\[e^{i\theta}=\cos(\theta)+i\sin(\theta)\]

<p>The <a href="https://en.wikipedia.org/wiki/Lagrangian_mechanics">Euler-Lagrange</a> differential equation is the fundamental equation of calculus of variations.</p>

\[\frac{\mathrm{d}}{\mathrm{d}t} \left ( \frac{\partial L}{\partial \dot{q}} \right ) = \frac{\partial L}{\partial q}\]

<p>The <a href="https://en.wikipedia.org/wiki/Schr%C3%B6dinger_equation">Schrödinger equation</a> describes how the quantum state of a quantum system changes with time.</p>

\[i\hbar\frac{\partial}{\partial t} \Psi(\mathbf{r},t) = \left [ \frac{-\hbar^2}{2\mu}\nabla^2 + V(\mathbf{r},t)\right ] \Psi(\mathbf{r},t)\]

<h2 id="code">Code</h2>

<p>Embed code by putting <code class="language-plaintext highlighter-rouge">{% highlight language %}</code> <code class="language-plaintext highlighter-rouge">{% endhighlight %}</code> blocks around it. Adding the parameter <code class="language-plaintext highlighter-rouge">linenos</code> will show source lines besides the code.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">static</span> <span class="kt">void</span> <span class="nf">asyncEnabled</span><span class="p">(</span><span class="n">Dict</span><span class="o">*</span> <span class="n">args</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">vAdmin</span><span class="p">,</span> <span class="n">String</span><span class="o">*</span> <span class="n">txid</span><span class="p">,</span> <span class="k">struct</span> <span class="n">Allocator</span><span class="o">*</span> <span class="n">requestAlloc</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">Admin</span><span class="o">*</span> <span class="n">admin</span> <span class="o">=</span> <span class="n">Identity_check</span><span class="p">((</span><span class="k">struct</span> <span class="n">Admin</span><span class="o">*</span><span class="p">)</span> <span class="n">vAdmin</span><span class="p">);</span>
    <span class="kt">int64_t</span> <span class="n">enabled</span> <span class="o">=</span> <span class="n">admin</span><span class="o">-&gt;</span><span class="n">asyncEnabled</span><span class="p">;</span>
    <span class="n">Dict</span> <span class="n">d</span> <span class="o">=</span> <span class="n">Dict_CONST</span><span class="p">(</span><span class="n">String_CONST</span><span class="p">(</span><span class="s">"asyncEnabled"</span><span class="p">),</span> <span class="n">Int_OBJ</span><span class="p">(</span><span class="n">enabled</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="n">Admin_sendMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">d</span><span class="p">,</span> <span class="n">txid</span><span class="p">,</span> <span class="n">admin</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<h2 id="gists">Gists</h2>

<p>With the <code class="language-plaintext highlighter-rouge">jekyll-gist</code> plugin, which is preinstalled on Github Pages, you can embed gists simply by using the <code class="language-plaintext highlighter-rouge">gist</code> command:</p>

<script src="https://gist.github.com/5555251.js?file=gist.md"></script>

<h2 id="images">Images</h2>

<p>Upload an image to the <em>assets</em> folder and embed it with <code class="language-plaintext highlighter-rouge">![title](/assets/name.jpg))</code>. Keep in mind that the path needs to be adjusted if Jekyll is run inside a subfolder.</p>

<p>A wrapper <code class="language-plaintext highlighter-rouge">div</code> with the class <code class="language-plaintext highlighter-rouge">large</code> can be used to increase the width of an image or iframe.</p>

<p><img src="https://user-images.githubusercontent.com/4943215/55412447-bcdb6c80-5567-11e9-8d12-b1e35fd5e50c.jpg" alt="Flower" /></p>

<p><a href="https://unsplash.com/photos/iGrsa9rL11o">Flower</a> by Tj Holowaychuk</p>

<h2 id="embedded-content">Embedded content</h2>

<p>You can also embed a lot of stuff, for example from YouTube, using the <code class="language-plaintext highlighter-rouge">embed.html</code> include.</p>

<div style="position: relative; margin: 1.5em 0; padding-bottom: 56.25%;">
  <iframe style="position: absolute;" src="https://www.youtube.com/embed/_C0A5zX-iqM" width="100%" height="100%" frameborder="0" allowfullscreen=""></iframe>
</div>]]></content><author><name>Blog Author</name></author><category term="media" /><summary type="html"><![CDATA[]]></summary></entry></feed>